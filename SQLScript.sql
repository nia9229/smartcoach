-----------------------------------------------------
-- Script con la estructura, datos y funciones de la BBDD para smartcoach.
-- Base de datos: smartcoach
-- @asignatura: Desarrollo de Sistemas de Informacion
-- @titulación: Ingeniería Informática
-- @curso: 2020/2021
-- @autor: Nicolas Amigo Sañudo
-----------------------------------------------------
----------------------Creacion base de datos--------------------------
SET DATEFORMAT dmy

CREATE DATABASE smartcoach
GO

USE smartcoach
GO

--- Nuevo filegroup para las imagenes dado que ocupan gran espacio
ALTER DATABASE smartcoach ADD FILEGROUP grupoImagenes
GO

--- Fichero perteneciente al nuevo filegroup
ALTER DATABASE smartcoach
ADD FILE ( 
	NAME = ficheroImagenes, 
	FILENAME = 'C:\Program Files\Microsoft SQL Server\MSSQL14.SQLEXPRESS\MSSQL\DATA\fichImagenes.ndf', 
	SIZE = 10MB, 
	FILEGROWTH = 10MB ) 
TO FILEGROUP grupoImagenes
GO

CREATE TABLE "ALIMENTO" (
		"CODALIMENTO" CHAR(5) NOT NULL,
		"NOMBRE" VARCHAR(30) UNIQUE NOT NULL,
		"ENERGIA" INT NOT NULL,
		"HIDRATOS" INT NOT NULL,
		"PROTEINA" INT NOT NULL,
		"GRASAS" INT NOT NULL,
		"CODTIPOALIMENTO" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "BIZUM" (
		"TELEFONO" VARCHAR(25) NOT NULL,
		"CODMETODOPAGO" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "CLIENTE" (
		"CODCLIENTE" CHAR(5) NOT NULL,
		"NIF" VARCHAR(9) NOT NULL UNIQUE,
		"NOMBRE" VARCHAR(20) NOT NULL,
		"APELLIDO1" VARCHAR(20) NOT NULL,
		"APELLIDO2" VARCHAR(20) NULL,
		"SEXO" CHAR(1) NOT NULL,
		"FECHANACIMIENTO" DATE NOT NULL,
		"EDAD" AS DATEDIFF(YY,FECHANACIMIENTO,GETDATE()),
		"CALLE" VARCHAR(150) NULL,
		"CP" VARCHAR(9) NULL,
		"POBLACION" VARCHAR(50) NULL,
		"TELEFONO" VARCHAR(25) NOT NULL,
		"EMAIL" VARCHAR(60) NOT NULL,
		FECHAALTA DATE NOT NULL,
		FECHABAJA DATE NULL,
		"CODIMAGEN" CHAR(5) NOT NULL,
		"CODPAIS" CHAR(2) NOT NULL,
		"CODMETODOPAGO" CHAR(5) NULL
	)
GO

CREATE TABLE "CLIENTERRSS" (
		"CODCLIENTE" CHAR(5) NOT NULL,
		"NOMBREUSUARIO" VARCHAR(20) NOT NULL,
		"CODRRSS" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "COMUNICACION" (
		"CODCOMUNICACION" CHAR(5) NOT NULL,
		"ASUNTO" VARCHAR(100) NOT NULL,
		"TEXTO" VARCHAR(MAX) NOT NULL,
		"FECHA" DATETIME NOT NULL,
		"CODENTRENADOR" CHAR(5) NOT NULL,
		"CODCLIENTE" CHAR(5) NOT NULL,
		"CODPDF" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "DIA" (
		"CODDIA" DATE NOT NULL,
		"DIASEMANA" VARCHAR(9) NOT NULL
	)
GO

CREATE TABLE "EJERCICIO" (
		"CODEJERCICIO" CHAR(5) NOT NULL,
		"NOMBRE" VARCHAR(30) NOT NULL,
		"DESCRIPCION" VARCHAR(500) NULL,
		"CODIMAGEN" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "EJERCICIO_X_MUSCULO" (
		"CODEJERCICIO" CHAR(5) NOT NULL,
		"CODMUSCULO" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "ENTRENADOR" (
		"CODENTRENADOR" CHAR(5) NOT NULL,
		"NOMBRE" VARCHAR(20) NOT NULL,
		"EMAIL" VARCHAR(60) NOT NULL
	)
GO

CREATE TABLE "FACTURA" (
		"NUMERO" CHAR(5) NOT NULL,
		"AÑO" CHAR(4) NOT NULL,
		"FECHA" DATETIME NOT NULL,
		"CODCLIENTE" CHAR(5) NOT NULL,
		"CODMETODOPAGO" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "IMAGEN" (
		"CODIMAGEN" CHAR(5) NOT NULL,
		"NOMBRE" VARCHAR(50) NOT NULL,
		"EXTENSION" CHAR(3) NOT NULL,
		"FICHERO" VARBINARY(MAX) NOT NULL
	) ON grupoImagenes --- las imagenes se almacenan en un filegroup aparte
GO

CREATE TABLE "INTOLERANCIA" (
		"CODINTOLERANCIA" CHAR(5) NOT NULL,
		"NOMBRE" VARCHAR(30) NOT NULL,
		"DESCRIPCION" CHAR(300) NOT NULL
	)
GO

CREATE TABLE "INTOLERANCIA_X_PERFILNUTRICIONAL" (
		"CODINTOLERANCIA" CHAR(5) NOT NULL,
		"CODNUTRICIONAL" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "MATERIAL" (
		"CODMATERIAL" CHAR(5) NOT NULL,
		"NOMBRE" VARCHAR(30) NOT NULL
	)
GO

CREATE TABLE "MATERIAL_X_EJERCICIO" (
		"CODMATERIAL" CHAR(5) NOT NULL,
		"CODEJERCICIO" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "MEDIDA" (
		"CODMEDIDA" CHAR(5) NOT NULL,
		"NOMBRE" VARCHAR(20) NOT NULL, 
		"CODUNIDAD" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "METODOPAGO" (
		"CODMETODOPAGO" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "MUSCULO" (
		"CODMUSCULO" CHAR(5) NOT NULL,
		"NOMBRE" VARCHAR(30) NOT NULL
	)
GO

CREATE TABLE "OBJETIVO" (
		"CODOBJETIVO" CHAR(5) NOT NULL,
		"NOMBRE" VARCHAR(30) NOT NULL,
		"DESCRIPCION" VARCHAR(300) NOT NULL,
		"FECHAINICIO" DATE NOT NULL,
		"FECHAPREVISTAFIN" DATE NOT NULL,
		"FECHAFIN" DATE NULL,
		"CODDEPORTIVO" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "PAIS" (
		"CODPAIS" CHAR(2) NOT NULL,
		"NOMBRE" VARCHAR(30) NOT NULL
	)
GO

CREATE TABLE "PAYPAL" (
		"EMAIL" VARCHAR(60) NOT NULL,
		"CODMETODOPAGO" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "PDF" (
		"CODPDF" CHAR(5) NOT NULL,
		"NOMBRE" VARCHAR(50) NOT NULL,
		"FICHERO" VARBINARY(MAX) NOT NULL
	)
GO

CREATE TABLE "PERFILALIMENTO" (
		"CODALIMENTO" CHAR(5) NOT NULL,
		"AFINIDAD" CHAR(2) NOT NULL,
		"CODNUTRICIONAL" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "PERFILDEPORTIVO" (
		"CODDEPORTIVO" CHAR(5) NOT NULL,
		"EXPERIENCIA" VARCHAR(12) NOT NULL,
		"HORAINITRABAJO" TIME NULL,
		"HORAFINTRABAJO" TIME NULL,
		"PATOLOGIAS" VARCHAR(400) NOT NULL,
		"CODPROFESION" CHAR(5) NULL,
		"CODCLIENTE" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "PERFILNUTRICIONAL" (
		"CODNUTRICIONAL" CHAR(5) NOT NULL,
		"NUMCOMIDAS" INT NOT NULL,
		"CODCLIENTE" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "PLANALIMENTO" (
		"CODDIETA" CHAR(5) NOT NULL,
		"CODALIMENTO" CHAR(5) NOT NULL,
		"NUMEROCOMIDA" INT NOT NULL,
		"CANTIDAD" INT NOT NULL,
		"CODUNIDAD" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "PLANEJERCICIO" (
		"CODEJERCICIO" CHAR(5) NOT NULL,
		"CODENTRENAMIENTO" CHAR(5) NOT NULL,
		"NUMSERIES" INT NULL,
		"NUMREPES" INT NULL,
		"DESCANSOSEGUNDOS" INT NULL,
		"RIR" INT NULL,
		"TECNICAAVANZADA" VARCHAR(9) NULL
	)
GO

CREATE TABLE "PLANENTRENAMIENTO" (
		"CODENTRENAMIENTO" CHAR(5) NOT NULL,
		"FECHA" DATETIME NOT NULL UNIQUE,
		"DURACIONCARDIO" DATETIME NULL,
		"TIPOCARDIO" CHAR(4) NULL,
		"CODCLIENTE" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "PLANNUTRICIONAL" (
		"CODDIETA" CHAR(5) NOT NULL,
		"FECHA" DATE NOT NULL,
		"CODCLIENTE" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "PROFESION" (
		"CODPROFESION" CHAR(5) NOT NULL,
		"NOMBRE" VARCHAR(30) NOT NULL
	)
GO

CREATE TABLE "REDSOCIAL" (
		"CODRRSS" CHAR(5) NOT NULL,
		"NOMBRE" VARCHAR(20) NOT NULL
	)
GO

CREATE TABLE "REGISTROANTROPOMETRICO" (
		"CODREGISTRO" CHAR(5) NOT NULL,
		"CODCLIENTE" CHAR(5) NOT NULL,
		"FECHA" DATE NOT NULL
	)
GO

CREATE TABLE "REGISTROIMAGEN" (
		"CODREGISTRO" CHAR(5) NOT NULL,
		"PARTECUERPO" VARCHAR(20) NULL,
		"CODIMAGEN" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "REGISTROLESIONES" (
		"CODLESION" CHAR(5) NOT NULL,
		"NOMBRE" VARCHAR(30) NOT NULL,
		"FECHAINICIO" DATE NOT NULL,
		"FECHAFIN" DATE NULL,
		"CODDEPORTIVO" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "REGISTROMEDIDA" (
		"CODREGISTRO" CHAR(5) NOT NULL,
		"CODMEDIDA" CHAR(5) NOT NULL,
		"VALOR" INT NOT NULL,
	)
GO

CREATE TABLE "REVISION" (
		"CODREVISION" CHAR(5) NOT NULL,
		"HORA" TIME NOT NULL,
		"COLOR" VARCHAR(8) NOT NULL,
		"TIPO" VARCHAR(9) NOT NULL,
		"CODDIA" DATE NOT NULL,
		"CODCLIENTE" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "SERVICIO" (
		"CODSERVICIO" CHAR(5) NOT NULL,
		"NOMBRE" VARCHAR(50) NOT NULL,
		"DESCRIPCION" VARCHAR(500) NOT NULL,
		"IMPORTE" DECIMAL(5,2) NOT NULL,
		"TIPO" VARCHAR(9) NOT NULL,
		"DURACION" INT NULL,
		"CODIMAGEN" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "SERVICIOFACTURA" (
		"CODSERVICIO" CHAR(5) NOT NULL,
		"NUMERO" CHAR(5) NOT NULL,
		"AÑO" CHAR(4) NOT NULL,
		"PRECIOCOMPRA" MONEY NOT NULL,
		"IVA" INT NOT NULL,
		"UNIDADES" INT NOT NULL
	)
GO

CREATE TABLE "TARJETA" (
		"NOMBRE" VARCHAR(65) NOT NULL,
		"NUMERO" CHAR(16) NOT NULL,
		"FECHACADUCIDAD" DATE NOT NULL,
		"TIPO" VARCHAR(7) NOT NULL,
		"CODMETODOPAGO" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "TIPOALIMENTO" (
		"CODTIPOALIMENTO" CHAR(5) NOT NULL,
		"NOMBRE" VARCHAR(30) NOT NULL
	)
GO

CREATE TABLE "TRANSFERENCIA" (
		"IBAN" CHAR(4) NOT NULL,
		"BANCO" CHAR(4) NOT NULL,
		"OFICINA" CHAR(4) NOT NULL,
		"DC" CHAR(2) NOT NULL,
		"NUMERO" CHAR(10) NOT NULL,
		"CODMETODOPAGO" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "UNIDAD" (
		"CODUNIDAD" CHAR(5) NOT NULL,
		"NOMBRE" VARCHAR(20) NOT NULL,
		"ABREVIATURA" VARCHAR(5) NOT NULL
	)
GO

ALTER TABLE "ALIMENTO" ADD CONSTRAINT "ALIMENTO_PK" PRIMARY KEY
	("CODALIMENTO")
GO

ALTER TABLE "BIZUM" ADD CONSTRAINT "BIZUM_PK" PRIMARY KEY
	("CODMETODOPAGO")
GO

ALTER TABLE "BIZUM" ADD CONSTRAINT "TELEFONOBIZUM_CK" CHECK (([TELEFONO] like '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'))
GO

ALTER TABLE "CLIENTE" ADD CONSTRAINT "CLIENTE_PK" PRIMARY KEY
	("CODCLIENTE")
GO

ALTER TABLE "CLIENTE" ADD CONSTRAINT "NIF_CK" CHECK (([NIF] like '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]_' OR [NIF] like '_[0-9][0-9][0-9][0-9][0-9][0-9][0-9]_'))
GO

ALTER TABLE "CLIENTE" ADD CONSTRAINT "SEXO_CK" CHECK ((SEXO in ('M','F')))
GO

ALTER TABLE "CLIENTE" ADD CONSTRAINT "TELEFONO_CK" CHECK (([TELEFONO] like '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'))
GO

ALTER TABLE "CLIENTE" ADD CONSTRAINT "EMAIL_CK" CHECK (([EMAIL] like '%@%'))
GO

ALTER TABLE "CLIENTERRSS" ADD CONSTRAINT "CLIENTERRSS_PK" PRIMARY KEY
	("CODCLIENTE",
	 "CODRRSS")
GO

ALTER TABLE "COMUNICACION" ADD CONSTRAINT "COMUNICACION_PK" PRIMARY KEY
	("CODCOMUNICACION")
GO

ALTER TABLE "DIA" ADD CONSTRAINT "DIA_PK" PRIMARY KEY
	("CODDIA")
GO

ALTER TABLE "DIA" ADD CONSTRAINT "DIASEMANA_CK" CHECK ((DIASEMANA in ('LUNES','MARTES','MIERCOLES','JUEVES','VIERNES','SABADO','DOMINGO')))
GO

ALTER TABLE "EJERCICIO" ADD CONSTRAINT "EJERCICIO_PK" PRIMARY KEY
	("CODEJERCICIO")
GO

ALTER TABLE "EJERCICIO_X_MUSCULO" ADD CONSTRAINT "EJERCICIO_X_MUSCULO_PK" PRIMARY KEY
	("CODEJERCICIO",
	 "CODMUSCULO")
GO

ALTER TABLE "ENTRENADOR" ADD CONSTRAINT "ENTRENADOR_PK" PRIMARY KEY
	("CODENTRENADOR")
GO

ALTER TABLE "ENTRENADOR" ADD CONSTRAINT "EMAILENTRENADOR_CK" CHECK (([EMAIL] like '%@%'))
GO

ALTER TABLE "FACTURA" ADD CONSTRAINT "FACTURA_PK" PRIMARY KEY
	("NUMERO",
	 "AÑO")
GO

ALTER TABLE "IMAGEN" ADD CONSTRAINT "IMAGEN_PK" PRIMARY KEY
	("CODIMAGEN")
GO

ALTER TABLE "IMAGEN" ADD CONSTRAINT "EXTENSION_CK" CHECK ((EXTENSION in ('JPG','JPEG','PNG')))
GO

ALTER TABLE "INTOLERANCIA" ADD CONSTRAINT "INTOLERANCIA_PK" PRIMARY KEY
	("CODINTOLERANCIA")
GO

ALTER TABLE "INTOLERANCIA_X_PERFILNUTRICIONAL" ADD CONSTRAINT "INTOLERANCIA_X_PERFILNUTRICIONAL_PK" PRIMARY KEY
	("CODINTOLERANCIA",
	 "CODNUTRICIONAL")
GO

ALTER TABLE "MATERIAL" ADD CONSTRAINT "MATERIAL_PK" PRIMARY KEY
	("CODMATERIAL")
GO

ALTER TABLE "MATERIAL_X_EJERCICIO" ADD CONSTRAINT "MATERIAL_X_EJERCICIO_PK" PRIMARY KEY
	("CODMATERIAL",
	 "CODEJERCICIO")
GO

ALTER TABLE "MEDIDA" ADD CONSTRAINT "MEDIDA_PK" PRIMARY KEY
	("CODMEDIDA")
GO

ALTER TABLE "METODOPAGO" ADD CONSTRAINT "METODOPAGO_PK" PRIMARY KEY
	("CODMETODOPAGO")
GO

ALTER TABLE "MUSCULO" ADD CONSTRAINT "MUSCULO_PK" PRIMARY KEY
	("CODMUSCULO")
GO

ALTER TABLE "OBJETIVO" ADD CONSTRAINT "OBJETIVO_PK" PRIMARY KEY
	("CODOBJETIVO")
GO

ALTER TABLE "OBJETIVO" ADD CONSTRAINT "FECHAPREVISTA_CK" CHECK ((FECHAPREVISTAFIN > FECHAINICIO))
GO

ALTER TABLE "OBJETIVO" ADD CONSTRAINT "FECHAFIN_CK" CHECK ((FECHAFIN >= FECHAPREVISTAFIN))
GO

ALTER TABLE "PAIS" ADD CONSTRAINT "PAIS_PK" PRIMARY KEY
	("CODPAIS")
GO

ALTER TABLE "PAYPAL" ADD CONSTRAINT "PAYPAL_PK" PRIMARY KEY
	("CODMETODOPAGO")
GO

ALTER TABLE "PAYPAL" ADD CONSTRAINT "EMAILPAYPAL_CK" CHECK (([EMAIL] like '%@%'))
GO

ALTER TABLE "PDF" ADD CONSTRAINT "PDF_PK" PRIMARY KEY
	("CODPDF")
GO

ALTER TABLE "PERFILALIMENTO" ADD CONSTRAINT "PERFILALIMENTO_PK" PRIMARY KEY
	("CODALIMENTO",
	 "CODNUTRICIONAL")
GO

ALTER TABLE "PERFILDEPORTIVO" ADD CONSTRAINT "PERFILDEPORTIVO_PK" PRIMARY KEY
	("CODDEPORTIVO")
GO

ALTER TABLE "PERFILDEPORTIVO" ADD CONSTRAINT "EXPERIENCIA_CK" CHECK ((EXPERIENCIA in ('PRINCIPIANTE','INTERMEDIO','AVANZADO')))
GO

ALTER TABLE "PERFILNUTRICIONAL" ADD CONSTRAINT "PERFILNUTRICIONAL_PK" PRIMARY KEY
	("CODNUTRICIONAL")
GO

ALTER TABLE "PERFILNUTRICIONAL" ADD CONSTRAINT "NUMCOMIDAS_CK" CHECK ((NUMCOMIDAS in (2,3,4,5,6,7,8)))
GO

ALTER TABLE "PLANALIMENTO" ADD CONSTRAINT "PLANALIMENTO_PK" PRIMARY KEY
	("CODDIETA",
	 "CODALIMENTO")
GO

ALTER TABLE "PLANEJERCICIO" ADD CONSTRAINT "PLANEJERCICIO_PK" PRIMARY KEY
	("CODEJERCICIO",
	 "CODENTRENAMIENTO")
GO

ALTER TABLE "PLANEJERCICIO" ADD CONSTRAINT "TECNICA_CK" CHECK ((TECNICAAVANZADA in ('DROPSETS','RESTPAUSE','MYOREPS')))
GO

ALTER TABLE "PLANENTRENAMIENTO" ADD CONSTRAINT "PLANENTRENAMIENTO_PK" PRIMARY KEY
	("CODENTRENAMIENTO")
GO

ALTER TABLE "PLANENTRENAMIENTO" ADD CONSTRAINT "CARDIO_CK" CHECK ((TIPOCARDIO in ('LISS','HITT')))
GO

ALTER TABLE "PLANNUTRICIONAL" ADD CONSTRAINT "PLANNUTRICIONAL_PK" PRIMARY KEY
	("CODDIETA")
GO

ALTER TABLE "PROFESION" ADD CONSTRAINT "PROFESION_PK" PRIMARY KEY
	("CODPROFESION")
GO

ALTER TABLE "REDSOCIAL" ADD CONSTRAINT "REDSOCIAL_PK" PRIMARY KEY
	("CODRRSS")
GO

ALTER TABLE "REGISTROANTROPOMETRICO" ADD CONSTRAINT "REGISTROANTROPOMETRICO_PK" PRIMARY KEY
	("CODREGISTRO")
GO

ALTER TABLE "REGISTROIMAGEN" ADD CONSTRAINT "REGISTROIMAGEN_PK" PRIMARY KEY
	("CODIMAGEN")
GO

ALTER TABLE "REGISTROLESIONES" ADD CONSTRAINT "REGISTROLESIONES_PK" PRIMARY KEY
	("CODLESION")
GO

ALTER TABLE "REGISTROMEDIDA" ADD CONSTRAINT "REGISTROMEDIDA_PK" PRIMARY KEY
	("CODREGISTRO",
	 "CODMEDIDA")
GO

ALTER TABLE "REVISION" ADD CONSTRAINT "REVISION_PK" PRIMARY KEY
	("CODDIA",
	 "CODREVISION")
GO

ALTER TABLE "REVISION" ADD CONSTRAINT "COLOR_CK" CHECK ((COLOR in ('AZUL','VERDE','ROJO','AMARILLO')))
GO

ALTER TABLE "REVISION" ADD CONSTRAINT "TIPOREVISION_CK" CHECK ((TIPO in ('EJERCICIO','NUTRICION','TODO')))
GO

ALTER TABLE "SERVICIO" ADD CONSTRAINT "SERVICIO_PK" PRIMARY KEY
	("CODSERVICIO")
GO

ALTER TABLE "SERVICIO" ADD CONSTRAINT "TIPOSERVICIO_CK" CHECK ((TIPO in ('SUSCRIPCION','PAQUETE')))
GO

ALTER TABLE "SERVICIO" ADD CONSTRAINT "DURACION_CK" CHECK ((DURACION in ('1','3','6')))
GO

ALTER TABLE "SERVICIOFACTURA" ADD CONSTRAINT "SERVICIOFACTURA_PK" PRIMARY KEY
	("CODSERVICIO",
	 "NUMERO",
	 "AÑO")
GO

ALTER TABLE "TARJETA" ADD CONSTRAINT "TARJETA_PK" PRIMARY KEY
	("CODMETODOPAGO")
GO

ALTER TABLE "TARJETA" ADD CONSTRAINT "FECHACADUCIDAD_CK" CHECK ((FECHACADUCIDAD >= GETDATE()))
GO

ALTER TABLE "TARJETA" ADD CONSTRAINT "TIPO_CK" CHECK ((TIPO in ('CREDITO', 'DEBITO')))
GO

ALTER TABLE "TIPOALIMENTO" ADD CONSTRAINT "TIPOALIMENTO_PK" PRIMARY KEY
	("CODTIPOALIMENTO")
GO

ALTER TABLE "TRANSFERENCIA" ADD CONSTRAINT "TRANSFERENCIA_PK" PRIMARY KEY
	("CODMETODOPAGO")
GO

ALTER TABLE "TRANSFERENCIA" ADD CONSTRAINT "IBAN_CK" CHECK (([IBAN] like '[A-Z][A-Z][0-9][0-9]'))
GO

ALTER TABLE "TRANSFERENCIA" ADD CONSTRAINT "NUMERO_CK" CHECK (([NUMERO] like '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'))
GO

ALTER TABLE "TRANSFERENCIA" ADD CONSTRAINT "DC_CK" CHECK (([DC] like '[0-9][0-9]'))
GO

ALTER TABLE "TRANSFERENCIA" ADD CONSTRAINT "OFICINA_CK" CHECK (([OFICINA] like '[0-9][0-9][0-9][0-9]'))
GO

ALTER TABLE "TRANSFERENCIA" ADD CONSTRAINT "BANCO_CK" CHECK (([BANCO] like '[0-9][0-9][0-9][0-9]'))
GO

ALTER TABLE "UNIDAD" ADD CONSTRAINT "UNIDAD_PK" PRIMARY KEY
	("CODUNIDAD")
GO

ALTER TABLE "ALIMENTO" ADD CONSTRAINT "ALIMENTO_TIPOALIMENTO_FK" FOREIGN KEY
	("CODTIPOALIMENTO")
	REFERENCES "TIPOALIMENTO"
	("CODTIPOALIMENTO")
GO

ALTER TABLE "CLIENTE" ADD CONSTRAINT "CLIENTE_IMAGEN_FK" FOREIGN KEY
	("CODIMAGEN")
	REFERENCES "IMAGEN"
	("CODIMAGEN")
GO

ALTER TABLE "CLIENTE" ADD CONSTRAINT "CLIENTE_METODOPAGO_FK" FOREIGN KEY
	("CODMETODOPAGO")
	REFERENCES "METODOPAGO"
	("CODMETODOPAGO")
GO

ALTER TABLE "CLIENTE" ADD CONSTRAINT "CLIENTE_PAIS_FK" FOREIGN KEY
	("CODPAIS")
	REFERENCES "PAIS"
	("CODPAIS")
GO

ALTER TABLE "CLIENTERRSS" ADD CONSTRAINT "CLIENTERRSS_CLIENTE_FK" FOREIGN KEY
	("CODCLIENTE")
	REFERENCES "CLIENTE"
	("CODCLIENTE")
GO

ALTER TABLE "CLIENTERRSS" ADD CONSTRAINT "CLIENTERRSS_REDSOCIAL_FK" FOREIGN KEY
	("CODRRSS")
	REFERENCES "REDSOCIAL"
	("CODRRSS")
GO

ALTER TABLE "COMUNICACION" ADD CONSTRAINT "COMUNICACION_CLIENTE_FK" FOREIGN KEY
	("CODCLIENTE")
	REFERENCES "CLIENTE"
	("CODCLIENTE")
GO

ALTER TABLE "COMUNICACION" ADD CONSTRAINT "COMUNICACION_ENTRENADOR_FK" FOREIGN KEY
	("CODENTRENADOR")
	REFERENCES "ENTRENADOR"
	("CODENTRENADOR")
GO

ALTER TABLE "COMUNICACION" ADD CONSTRAINT "COMUNICACION_PDF_FK" FOREIGN KEY
	("CODPDF")
	REFERENCES "PDF"
	("CODPDF")
GO

ALTER TABLE "EJERCICIO" ADD CONSTRAINT "EJERCICIO_IMAGEN_FK" FOREIGN KEY
	("CODIMAGEN")
	REFERENCES "IMAGEN"
	("CODIMAGEN")
GO

ALTER TABLE "EJERCICIO_X_MUSCULO" ADD CONSTRAINT "EJERCICIO_MUSCULO_FK" FOREIGN KEY
	("CODEJERCICIO")
	REFERENCES "EJERCICIO"
	("CODEJERCICIO")
GO

ALTER TABLE "EJERCICIO_X_MUSCULO" ADD CONSTRAINT "EJERCICIO_MUSCULO_FK2" FOREIGN KEY
	("CODMUSCULO")
	REFERENCES "MUSCULO"
	("CODMUSCULO")
GO

ALTER TABLE "FACTURA" ADD CONSTRAINT "FACTURA_METODOPAGO_FK" FOREIGN KEY
	("CODMETODOPAGO")
	REFERENCES "METODOPAGO"
	("CODMETODOPAGO")
GO

ALTER TABLE "FACTURA" ADD CONSTRAINT "FACTURA_CLIENTE_FK" FOREIGN KEY
	("CODCLIENTE")
	REFERENCES "CLIENTE"
	("CODCLIENTE")
GO

ALTER TABLE "INTOLERANCIA_X_PERFILNUTRICIONAL" ADD CONSTRAINT "INTOLERANCIA_PERFILNUTRICIONAL_FK" FOREIGN KEY
	("CODINTOLERANCIA")
	REFERENCES "INTOLERANCIA"
	("CODINTOLERANCIA")
GO

ALTER TABLE "INTOLERANCIA_X_PERFILNUTRICIONAL" ADD CONSTRAINT "INTOLERANCIA_PERFILNUTRICIONAL_FK1" FOREIGN KEY
	("CODNUTRICIONAL")
	REFERENCES "PERFILNUTRICIONAL"
	("CODNUTRICIONAL")
GO

ALTER TABLE "MATERIAL_X_EJERCICIO" ADD CONSTRAINT "MATERIAL_EJERCICIO_FK1" FOREIGN KEY
	("CODMATERIAL")
	REFERENCES "MATERIAL"
	("CODMATERIAL")
GO

ALTER TABLE "MATERIAL_X_EJERCICIO" ADD CONSTRAINT "MATERIAL_EJERCICIO_FK11" FOREIGN KEY
	("CODEJERCICIO")
	REFERENCES "EJERCICIO"
	("CODEJERCICIO")
GO

ALTER TABLE "MEDIDA" ADD CONSTRAINT "MEDIDA_UNIDAD_FK" FOREIGN KEY
	("CODUNIDAD")
	REFERENCES "UNIDAD"
	("CODUNIDAD")
GO

ALTER TABLE "OBJETIVO" ADD CONSTRAINT "OBJETIVO_PERFILDEPORTIVO_FK" FOREIGN KEY
	("CODDEPORTIVO")
	REFERENCES "PERFILDEPORTIVO"
	("CODDEPORTIVO")
GO

ALTER TABLE "PERFILALIMENTO" ADD CONSTRAINT "PERFILALIMENTO_ALIMENTO_FK" FOREIGN KEY
	("CODALIMENTO")
	REFERENCES "ALIMENTO"
	("CODALIMENTO")
GO

ALTER TABLE "PERFILALIMENTO" ADD CONSTRAINT "PERFILALIMENTO_PERFILNUTRICIONAL_FK" FOREIGN KEY
	("CODNUTRICIONAL")
	REFERENCES "PERFILNUTRICIONAL"
	("CODNUTRICIONAL")
GO


ALTER TABLE "PERFILALIMENTO" ADD CONSTRAINT "AFINIDAD_CK" CHECK ((AFINIDAD in ('SI','NO')))
GO

ALTER TABLE "PERFILDEPORTIVO" ADD CONSTRAINT "PERFILDEPORTIVO_CLIENTE_FK" FOREIGN KEY
	("CODCLIENTE")
	REFERENCES "CLIENTE"
	("CODCLIENTE")
GO

ALTER TABLE "PERFILDEPORTIVO" ADD CONSTRAINT "PERFILDEPORTIVO_PROFESION_FK" FOREIGN KEY
	("CODPROFESION")
	REFERENCES "PROFESION"
	("CODPROFESION")
GO

ALTER TABLE "PERFILNUTRICIONAL" ADD CONSTRAINT "PERFILNUTRICIONAL_CLIENTE_FK" FOREIGN KEY
	("CODCLIENTE")
	REFERENCES "CLIENTE"
	("CODCLIENTE")
GO

ALTER TABLE "PLANALIMENTO" ADD CONSTRAINT "PLANALIMENTO_ALIMENTO_FK" FOREIGN KEY
	("CODALIMENTO")
	REFERENCES "ALIMENTO"
	("CODALIMENTO")
GO

ALTER TABLE "PLANALIMENTO" ADD CONSTRAINT "PLANALIMENTO_PLANNUTRICIONAL_FK" FOREIGN KEY
	("CODDIETA")
	REFERENCES "PLANNUTRICIONAL"
	("CODDIETA")
GO

ALTER TABLE "PLANALIMENTO" ADD CONSTRAINT "PLANALIMENTO_CODUNIDAD_FK" FOREIGN KEY
	("CODUNIDAD")
	REFERENCES "UNIDAD"
	("CODUNIDAD")
GO

ALTER TABLE "PLANEJERCICIO" ADD CONSTRAINT "PLANEJERCICIO_EJERCICIO_FK" FOREIGN KEY
	("CODEJERCICIO")
	REFERENCES "EJERCICIO"
	("CODEJERCICIO")
GO

ALTER TABLE "PLANEJERCICIO" ADD CONSTRAINT "PLANEJERCICIO_PLANENTRENAMIENTO_FK" FOREIGN KEY
	("CODENTRENAMIENTO")
	REFERENCES "PLANENTRENAMIENTO"
	("CODENTRENAMIENTO")
GO

ALTER TABLE "PLANENTRENAMIENTO" ADD CONSTRAINT "PLANENTRENAMIENTO_CLIENTE_FK" FOREIGN KEY
	("CODCLIENTE")
	REFERENCES "CLIENTE"
	("CODCLIENTE")
GO

ALTER TABLE "PLANNUTRICIONAL" ADD CONSTRAINT "PLANNUTRICIONAL_CLIENTE_FK" FOREIGN KEY
	("CODCLIENTE")
	REFERENCES "CLIENTE"
	("CODCLIENTE")
GO

ALTER TABLE "REGISTROANTROPOMETRICO" ADD CONSTRAINT "REGISTROANTROPOMETRICO_CLIENTE_FK" FOREIGN KEY
	("CODCLIENTE")
	REFERENCES "CLIENTE"
	("CODCLIENTE") 
GO

ALTER TABLE "REGISTROIMAGEN" ADD CONSTRAINT "REGISTROIMAGEN_IMAGEN_FK" FOREIGN KEY
	("CODIMAGEN")
	REFERENCES "IMAGEN"
	("CODIMAGEN")
GO

ALTER TABLE "REGISTROIMAGEN" ADD CONSTRAINT "REGISTROIMAGEN_REGISTROANTROPOMETRICO_FK" FOREIGN KEY
	("CODREGISTRO")
	REFERENCES "REGISTROANTROPOMETRICO"
	("CODREGISTRO")
GO

ALTER TABLE "REGISTROLESIONES" ADD CONSTRAINT "REGISTROLESIONES_PERFILDEPORTIVO_FK" FOREIGN KEY
	("CODDEPORTIVO")
	REFERENCES "PERFILDEPORTIVO"
	("CODDEPORTIVO")
GO

ALTER TABLE "REGISTROMEDIDA" ADD CONSTRAINT "REGISTROMEDIDA_MEDIDA_FK" FOREIGN KEY
	("CODMEDIDA")
	REFERENCES "MEDIDA"
	("CODMEDIDA")
GO

ALTER TABLE "REGISTROMEDIDA" ADD CONSTRAINT "REGISTROMEDIDA_REGISTROANTROPOMETRICO_FK" FOREIGN KEY
	("CODREGISTRO")
	REFERENCES "REGISTROANTROPOMETRICO"
	("CODREGISTRO")
GO

ALTER TABLE "REVISION" ADD CONSTRAINT "REVISION_CLIENTE_FK" FOREIGN KEY
	("CODCLIENTE")
	REFERENCES "CLIENTE"
	("CODCLIENTE")
GO

ALTER TABLE "REVISION" ADD CONSTRAINT "REVISION_DIA_FK" FOREIGN KEY
	("CODDIA")
	REFERENCES "DIA"
	("CODDIA")
GO

ALTER TABLE "SERVICIO" ADD CONSTRAINT "SERVICIO_IMAGEN_FK" FOREIGN KEY
	("CODIMAGEN")
	REFERENCES "IMAGEN"
	("CODIMAGEN")
GO

ALTER TABLE "SERVICIOFACTURA" ADD CONSTRAINT "SERVICIOFACTURA_FACTURA_FK" FOREIGN KEY
	("NUMERO",
	 "AÑO")
	REFERENCES "FACTURA"
	("NUMERO",
	 "AÑO")
GO

ALTER TABLE "SERVICIOFACTURA" ADD CONSTRAINT "SERVICIOFACTURA_SERVICIO_FK" FOREIGN KEY
	("CODSERVICIO")
	REFERENCES "SERVICIO"
	("CODSERVICIO")
GO

----------------------Procedimientos--------------------------
/**
* Procedimiento para dar de alta un cliente. Si lo estuvo antes se actualizan ciertos datos y se establece una nueva fecha de alta
*/
CREATE OR ALTER PROCEDURE  altaCLiente @codCliente CHAR(5), @nif VARCHAR(9), @nombre VARCHAR(20), @apellido1 VARCHAR(20), @apellido2 VARCHAR(20), @sexo CHAR(1),@fechaNacimiento DATE,
@calle VARCHAR(150), @cp VARCHAR(9), @poblacion VARCHAR(50), @telefono VARCHAR(25), @email VARCHAR(60), @nombrePais VARCHAR(30),
@codImagen CHAR(5), @nombreImagen VARCHAR(50), @extension CHAR(3), @fichero VARBINARY(MAX) AS 
BEGIN TRY
	BEGIN TRANSACTION
	IF UPPER(@nombrePAIS) NOT IN (SELECT P.NOMBRE FROM PAIS P)
	BEGIN
		RAISERROR('El pais no existe',16,1)
	END
	IF (@codCliente IN (SELECT C.CODCLIENTE FROM CLIENTE C) AND (SELECT C.FECHABAJA FROM CLIENTE C WHERE C.CODCLIENTE=@codCliente) IS NOT NULL) OR (@nif IN (SELECT C.NIF FROM CLIENTE C)  AND (SELECT C.FECHABAJA FROM CLIENTE C WHERE C.NIF=@nif) IS NOT NULL)
	BEGIN
		UPDATE CLIENTE SET CALLE=@calle, CP=@cp, POBLACION=@poblacion,TELEFONO=@telefono,EMAIL=@email,FECHAALTA=GETDATE(),FECHABAJA=NULL WHERE NIF=@nif -- El cliente estuvo registrado
	END
	ELSE
	BEGIN
	DECLARE @codPais CHAR(5)
	SET @codPais = (SELECT P.CODPAIS FROM PAIS P WHERE P.NOMBRE=UPPER(@nombrePAIS))
	INSERT INTO IMAGEN(CODIMAGEN,NOMBRE,EXTENSION,FICHERO) VALUES(@codImagen, @nombreImagen, @extension, @fichero)
	INSERT INTO CLIENTE(CODCLIENTE,NIF,NOMBRE,APELLIDO1,APELLIDO2,SEXO,FECHANACIMIENTO,CALLE,CP,POBLACION,TELEFONO,EMAIL,FECHAALTA,CODPAIS, CODIMAGEN) -- El cliente no estuvo registrado
	VALUES (@codCliente,@nif,@nombre,@apellido1,@apellido2,@sexo,@fechaNacimiento,@calle,@cp,@poblacion,@telefono,@email,GETDATE(),@codPais, @codImagen)
	END
	COMMIT TRANSACTION
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
END CATCH
RETURN;
GO

/**
* Procedimiento para dar de baja a un cliente
*/
CREATE OR ALTER PROCEDURE bajaCliente @codCliente CHAR(5) AS 
BEGIN TRY
	BEGIN TRANSACTION
	IF @codCliente NOT IN (SELECT C.CODCLIENTE FROM CLIENTE C WHERE C.FECHABAJA IS NOT NULL OR C.FECHABAJA IS NULL)
	BEGIN
		RAISERROR('No existe el cliente o el cliente ya ha sido dado de baja',16,1)
	END
	UPDATE CLIENTE SET FECHABAJA = GETDATE() WHERE CODCLIENTE=@codCliente 
	COMMIT TRANSACTION
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
END CATCH
RETURN;
GO

/**
* Procedimiento para crear un nuevo objetivo de un determinado cliente
*/
CREATE OR ALTER PROCEDURE nuevoObjetivoCliente @codCliente CHAR(5), @codObjetivo CHAR(5), @nombre VARCHAR(30), @descripcion VARCHAR(300),
@fechaInicio DATE, @fechaPrevistaFin DATE AS 
BEGIN TRY
	BEGIN TRANSACTION
	IF @codCliente NOT IN (SELECT C.CODCLIENTE FROM CLIENTE C WHERE C.FECHABAJA IS NOT NULL OR C.FECHABAJA IS NULL)
	BEGIN
		RAISERROR('No existe el cliente o el cliente ha sido dado de baja',16,1)
	END
	DECLARE @codDeportivo CHAR(5)
	SET @codDeportivo = (SELECT PD.CODDEPORTIVO FROM PERFILDEPORTIVO PD WHERE PD.CODCLIENTE=@codCliente)
	INSERT INTO OBJETIVO(CODOBJETIVO,NOMBRE,DESCRIPCION,FECHAINICIO,FECHAPREVISTAFIN,CODDEPORTIVO) VALUES (@codObjetivo,@nombre,@descripcion,@fechaInicio,@fechaPrevistaFin,@codDeportivo)
	COMMIT TRANSACTION
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
END CATCH
RETURN;
GO

/**
* Procedimiento para crear el perfil deportivo de un nuevo cliente
*/
CREATE OR ALTER PROCEDURE nuevoPerfilDeportivoCliente @codDeportivo CHAR(5), @experiencia VARCHAR(12), @horaIni TIME, @horaFin TIME, @patologias VARCHAR(400), 
@nombreProfesion VARCHAR(30), @codCliente CHAR(5) AS
BEGIN TRY
	IF @codDeportivo IN (SELECT CODDEPORTIVO FROM PERFILDEPORTIVO)
	BEGIN
		RAISERROR('El perfil ya existe',16,1)
	END
	IF @codCliente NOT IN (SELECT C.CODCLIENTE FROM CLIENTE C WHERE C.FECHABAJA IS NOT NULL OR C.FECHABAJA IS NULL)
	BEGIN
		RAISERROR('No existe el cliente o el cliente ha sido dado de baja',16,1)
	END
	IF @nombreProfesion NOT IN (SELECT NOMBRE FROM PROFESION) 
	BEGIN
		RAISERROR('La profesion no existe',16,1)
	END
	DECLARE @codProfesion CHAR(5)
	SET @codProfesion = (SELECT P.CODPROFESION FROM PROFESION P WHERE P.NOMBRE=@nombreProfesion)
	INSERT INTO PERFILDEPORTIVO(CODDEPORTIVO,EXPERIENCIA,HORAINITRABAJO,HORAFINTRABAJO,PATOLOGIAS,CODPROFESION,CODCLIENTE) VALUES (@codDeportivo, @experiencia, @horaIni, @horaFin, @patologias, @codProfesion, @codCliente)
	COMMIT TRANSACTION
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
END CATCH
RETURN;
GO

/**
* Procedimiento para añadir una nueva imagen al registro antropometrico
*/
CREATE OR ALTER PROCEDURE nuevaImagenRegistro @codCliente CHAR(5), @fecha DATE, @parteCuerpo VARCHAR(20), 
@codImagen CHAR(5),@nombre VARCHAR(50),@extension CHAR(3),@fichero VARBINARY(MAX) AS
BEGIN TRY
	IF @codCliente NOT IN (SELECT C.CODCLIENTE FROM CLIENTE C WHERE C.FECHABAJA IS NOT NULL OR C.FECHABAJA IS NULL)
	BEGIN
		RAISERROR('No existe el cliente o el cliente ha sido dado de baja',16,1)
	END
	IF NOT EXISTS (SELECT RA.CODREGISTRO FROM REGISTROANTROPOMETRICO RA WHERE RA.CODCLIENTE=@codCliente AND RA.FECHA=@fecha)
	BEGIN
		RAISERROR('No existe el registro',16,1)
	END
	DECLARE @codRegistro CHAR(5)
	SET @codRegistro = (SELECT RA.CODREGISTRO FROM REGISTROANTROPOMETRICO RA WHERE RA.CODCLIENTE=@codCliente AND RA.FECHA=@fecha)
	INSERT INTO IMAGEN(CODIMAGEN,NOMBRE,EXTENSION,FICHERO) VALUES (@codImagen,@nombre,@extension,@fichero)
	INSERT INTO REGISTROIMAGEN(CODREGISTRO,PARTECUERPO,CODIMAGEN) VALUES(@codRegistro,@parteCuerpo,@codImagen)
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
END CATCH
RETURN;
GO

/**
* Procedimiento para insertar un nuevo ejercicio junto a su imagen
*/
CREATE OR ALTER PROCEDURE insertarEjercicio @codEjercicio CHAR(5), @nombre VARCHAR(30), @descripcion VARCHAR(300), 
@codImagen CHAR(5), @nombreImg VARCHAR(50), @extension CHAR(3), @fichero VARBINARY(MAX) AS 
BEGIN TRY
	BEGIN TRANSACTION
	IF @codEjercicio IN (SELECT E.CODEJERCICIO FROM EJERCICIO E)
	BEGIN
		RAISERROR('El ejercicio ya existe',16,1)
	END
	IF @codImagen IN (SELECT I.CODIMAGEN FROM IMAGEN I)
	BEGIN
		RAISERROR('La imagen ya existe',16,1)
	END
	INSERT INTO IMAGEN(CODIMAGEN,NOMBRE,EXTENSION,FICHERO) VALUES (@codImagen,@nombreImg,@extension,@fichero)
	INSERT INTO EJERCICIO(CODEJERCICIO,NOMBRE,DESCRIPCION,CODIMAGEN) VALUES (@codEjercicio, @nombre, @descripcion, @codImagen) 
COMMIT TRANSACTION
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
END CATCH;
GO

/**
* Procedimiento para establecer una relacion entre ejercicio y musculo
*/
CREATE OR ALTER PROCEDURE ejercicioMusculo @codEjercicio CHAR(5), @codMusculo CHAR(5) AS 
BEGIN TRY
	BEGIN TRANSACTION
	IF @codEjercicio NOT IN (SELECT E.CODEJERCICIO FROM EJERCICIO E)
	BEGIN
		RAISERROR('El ejercicio no existe',16,1)
	END
	IF @codMusculo NOT IN (SELECT M.CODMUSCULO FROM MUSCULO M)
	BEGIN
		RAISERROR('El musculo no existe',16,1)
	END
	INSERT INTO EJERCICIO_X_MUSCULO(CODEJERCICIO,CODMUSCULO) VALUES (@codEjercicio,@codMusculo)
	COMMIT TRANSACTION
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
END CATCH
RETURN;
GO



/**
* Procedimiento para añadir un alimento a la dieta de un cliente en una determinada fecha
*/
CREATE OR ALTER PROCEDURE añadeAlimentoDieta @codDieta CHAR(5), @codCliente CHAR(5), @fecha DATE, @codAlimento CHAR(5), @cantidad INT, @codUnidad CHAR(5), @numeroComida INT AS
BEGIN TRY
	BEGIN TRANSACTION
	IF @codCliente NOT IN (SELECT C.CODCLIENTE FROM CLIENTE C WHERE C.FECHABAJA IS NOT NULL OR C.FECHABAJA IS NULL)
	BEGIN
		RAISERROR('No existe el cliente o el cliente ha sido dado de baja',16,1)
	END
	IF EXISTS (SELECT * FROM PLANNUTRICIONAL PN WHERE PN.CODDIETA=@codDieta) 
	BEGIN
		INSERT INTO PLANALIMENTO(CODDIETA,CODALIMENTO,NUMEROCOMIDA,CANTIDAD,CODUNIDAD) VALUES (@codDieta,@codAlimento,@numeroComida,@cantidad,@codUnidad)
	END
	ELSE
	BEGIN
		INSERT INTO PLANNUTRICIONAL(CODDIETA,FECHA,CODCLIENTE) VALUES(@codDieta,@fecha,@codCliente)
		INSERT INTO PLANALIMENTO(CODDIETA,CODALIMENTO,NUMEROCOMIDA,CANTIDAD,CODUNIDAD) VALUES(@codDieta,@codAlimento,@numeroComida,@cantidad,@codUnidad) 
	END
COMMIT TRANSACTION
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
END CATCH
RETURN;
GO

---- Funciones destinadas a columnas calculadas-------
CREATE OR ALTER FUNCTION dbo.calculaImporteTotalFactura(@AÑO CHAR(4), @NUMERO CHAR(5)) RETURNS MONEY
AS BEGIN
  DECLARE @BASEIMPONIBLE MONEY = (SELECT SUM(SF.PRECIOCOMPRA*SF.UNIDADES) FROM SERVICIOFACTURA SF WHERE SF.AÑO=@AÑO AND SF.NUMERO=@NUMERO)
  DECLARE @IVA INT = (SELECT SF.IVA FROM SERVICIOFACTURA SF WHERE SF.AÑO=@AÑO AND SF.NUMERO=@NUMERO)
  RETURN ((@BASEIMPONIBLE * (@IVA / 100)) + @BASEIMPONIBLE)
END
GO
ALTER TABLE "FACTURA" ADD "IMPORTETOTAL" AS dbo.calculaImporteTotalFactura(AÑO,NUMERO);
GO

CREATE OR ALTER FUNCTION dbo.devuelveImporteServicio(@CODSERVICIO CHAR(5)) RETURNS DECIMAL(9,2)
AS BEGIN
  RETURN (SELECT S.IMPORTE FROM SERVICIO S WHERE S.CODSERVICIO=@CODSERVICIO)
END
GO	

CREATE OR ALTER FUNCTION dbo.calculaEnergiaTotal(@CODDIETA CHAR(5)) RETURNS INT
AS BEGIN
  RETURN (SELECT SUM(A.ENERGIA*(PA.CANTIDAD)/100) FROM PLANALIMENTO PA INNER JOIN ALIMENTO A ON PA.CODALIMENTO=A.CODALIMENTO WHERE PA.CODDIETA=@CODDIETA GROUP BY CODDIETA)
END
GO	
ALTER TABLE "PLANNUTRICIONAL" ADD "ENERGIA" AS dbo.calculaEnergiaTotal(CODDIETA);
GO

CREATE OR ALTER FUNCTION dbo.calculaHidratosTotal(@CODDIETA CHAR(5)) RETURNS INT
AS BEGIN
  RETURN (SELECT SUM(A.HIDRATOS*(PA.CANTIDAD)/100) FROM PLANALIMENTO PA INNER JOIN ALIMENTO A ON PA.CODALIMENTO=A.CODALIMENTO WHERE PA.CODDIETA=@CODDIETA GROUP BY CODDIETA)
END
GO	
ALTER TABLE "PLANNUTRICIONAL" ADD "HIDRATOS" AS dbo.calculaHidratosTotal(CODDIETA);
GO

CREATE OR ALTER FUNCTION dbo.calculaProteinasTotal(@CODDIETA CHAR(5)) RETURNS INT
AS BEGIN
  RETURN (SELECT SUM(A.PROTEINA*(PA.CANTIDAD)/100) FROM PLANALIMENTO PA INNER JOIN ALIMENTO A ON PA.CODALIMENTO=A.CODALIMENTO WHERE PA.CODDIETA=@CODDIETA GROUP BY CODDIETA)
END
GO	
ALTER TABLE "PLANNUTRICIONAL" ADD "PROTEINAS" AS dbo.calculaProteinasTotal(CODDIETA);
GO

CREATE OR ALTER FUNCTION dbo.calculaGrasasTotal(@CODDIETA CHAR(5)) RETURNS INT
AS BEGIN
  RETURN (SELECT SUM(A.GRASAS*(PA.CANTIDAD)/100) FROM PLANALIMENTO PA INNER JOIN ALIMENTO A ON PA.CODALIMENTO=A.CODALIMENTO WHERE PA.CODDIETA=@CODDIETA GROUP BY CODDIETA)
END
GO	
ALTER TABLE "PLANNUTRICIONAL" ADD "GRASAS" AS dbo.calculaGrasasTotal(CODDIETA);
GO

----------------------Funciones--------------------------
/**
* Funcion que retorna la media de energia semanal de un cliente
*/
CREATE OR ALTER FUNCTION dbo.mediaEnergiaCliente(@codCliente CHAR(5)) RETURNS INT
AS BEGIN
	RETURN(SELECT AVG(PN.ENERGIA) FROM PLANNUTRICIONAL PN WHERE PN.CODCLIENTE=@codCliente GROUP BY DATEPART(WEEK,PN.FECHA))
END
GO

/**
* Funcion para obtener la informacion nutricional de un alimento 
*/
CREATE OR ALTER FUNCTION dbo.infoAlimento(@codAlimento CHAR(5)) RETURNS TABLE
AS
	RETURN(SELECT A.NOMBRE,A.ENERGIA, A.HIDRATOS, A.PROTEINA, A.GRASAS FROM ALIMENTO A WHERE A.CODALIMENTO=@codAlimento)
GO

/**
* Funcion para obtener el numero de clientes de una determinada experiencia
*/
CREATE OR ALTER FUNCTION dbo.numClientesExperiencia(@experiencia VARCHAR(12)) RETURNS INT 
AS BEGIN
	RETURN(SELECT COUNT(*) FROM PERFILDEPORTIVO PD WHERE PD.EXPERIENCIA=@experiencia)
END
GO

/**
* Funcion para obtener el total de ingresos brutos mensuales provenientes de ventas de servicios
*/
CREATE OR ALTER FUNCTION dbo.ingresosMensuales() RETURNS TABLE
AS
	RETURN(SELECT SUM(F.IMPORTETOTAL) AS 'Ingresos', MONTH(F.FECHA) AS 'Mes'  FROM FACTURA F GROUP BY MONTH(F.FECHA))
GO

/**
* Funcion que retorna las 10 revisiones mas proximas
*/
CREATE OR ALTER FUNCTION dbo.revisionMasProximas() RETURNS TABLE 
AS 
	RETURN(SELECT TOP 10 R.* FROM REVISION R WHERE R.CODDIA >= GETDATE() ORDER BY R.CODDIA ASC)
GO

/**
* Funcion que retorna el servicio mas empleado segun los clientes de una determinada experiencia
*/
CREATE OR ALTER FUNCTION dbo.topServicioExperiencia(@experiencia VARCHAR(12)) RETURNS CHAR(5)
AS BEGIN
	RETURN(SELECT TOP 1 SF.CODSERVICIO FROM SERVICIOFACTURA SF INNER JOIN FACTURA F ON SF.NUMERO=F.NUMERO AND SF.AÑO=F.AÑO
	INNER JOIN CLIENTE C ON F.CODCLIENTE=C.CODCLIENTE
	INNER JOIN PERFILDEPORTIVO PD ON C.CODCLIENTE=PD.CODCLIENTE 
	WHERE PD.EXPERIENCIA=@experiencia GROUP BY SF.CODSERVICIO)
END
GO

/**
* Funcion que retorna el numero de bajas en un mes
*/ 
CREATE OR ALTER FUNCTION dbo.bajasMensuales() RETURNS TABLE
AS 
	RETURN(SELECT COUNT (*) AS 'NumeroBajas', MONTH(C.FECHABAJA) AS 'Mes' FROM CLIENTE C WHERE C.FECHABAJA IS NOT NULL GROUP BY MONTH(C.FECHABAJA))
GO

/**
* Funcion que retorna el incremento o decremento de ingresos brutos respecto al mes anterior
*/
CREATE OR ALTER FUNCTION dbo.variacionIngresosMes() RETURNS DECIMAL(5,2)
AS BEGIN
	DECLARE @primerDiaAnterior DATE = (SELECT DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) - 1, 0))
	DECLARE @ultimoDiaAnterior DATE = (SELECT DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), -1) )
	DECLARE @primerDiaActual DATE = (SELECT DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0))
	DECLARE @ultimoDiaActual DATE = (SELECT DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) + 1, -1))
	DECLARE @ingresosAnterior MONEY = (SELECT SUM(F.IMPORTETOTAL) FROM FACTURA F WHERE F.FECHA BETWEEN @primerDiaAnterior AND @ultimoDiaAnterior)
	DECLARE @ingresosActual MONEY  = (SELECT SUM(F.IMPORTETOTAL) FROM FACTURA F WHERE F.FECHA BETWEEN @primerDiaActual AND @ultimoDiaActual)
	RETURN(((@ingresosActual/@ingresosAnterior)-1)*100)
END
GO

/**
* Funcion que retorna el incremento o decremento de ingresos brutos respecto al mes anterior
*/
CREATE OR ALTER FUNCTION dbo.variacionMeses() RETURNS TABLE
AS 
	RETURN(SELECT MONTH(F.FECHA) AS Mes, F.IMPORTETOTAL,(F.IMPORTETOTAL - LAG(F.IMPORTETOTAL, 1) OVER (ORDER BY MONTH(F.FECHA))) / LAG(F.IMPORTETOTAL, 1) OVER (ORDER BY MONTH(F.FECHA))*100 AS Variacion
    FROM FACTURA F)
GO

/**
* Funcion que retorna los emails de los clientes junto sus nombres y apellidos
*/
CREATE OR ALTER FUNCTION dbo.mailClientes() RETURNS TABLE 
AS
	RETURN(SELECT C.CODCLIENTE,C.NOMBRE,C.APELLIDO1,C.APELLIDO2,C.EMAIL FROM CLIENTE C)
GO

/**
* Funcion que retorna los objetivos en activo de un cliente
*/
CREATE OR ALTER FUNCTION dbo.objetivosActivosCliente(@codCliente CHAR(5)) RETURNS TABLE 
AS 
	RETURN(SELECT O.* FROM OBJETIVO O WHERE O.CODDEPORTIVO=(SELECT PD.CODDEPORTIVO FROM PERFILDEPORTIVO PD WHERE PD.CODCLIENTE=@codCliente) AND O.FECHAFIN IS NULL)
GO

/**
* Funcion que retorna las medidas corporales actuales de un cliente
*/
CREATE OR ALTER FUNCTION dbo.medidasCliente(@codCliente CHAR(5)) RETURNS TABLE 
AS 
	RETURN(SELECT M.NOMBRE, RM.VALOR, U.NOMBRE AS 'Unidad'  FROM REGISTROMEDIDA RM INNER JOIN MEDIDA M ON RM.CODMEDIDA=M.CODMEDIDA 
	INNER JOIN UNIDAD U ON M.CODUNIDAD=U.CODUNIDAD
	WHERE RM.CODREGISTRO=(SELECT TOP 1 RA.CODREGISTRO FROM REGISTROANTROPOMETRICO RA WHERE RA.CODCLIENTE=@codCliente ORDER BY RA.FECHA DESC))
GO

/**
* Funcion que retorna una tabla con la evolucion de una determinada medida de un cliente
*/
CREATE OR ALTER FUNCTION dbo.evolucionMedidaCliente(@codCliente CHAR(5), @codMedida CHAR(5)) RETURNS TABLE 
AS 
	RETURN(SELECT RA.FECHA, RM.VALOR, U.NOMBRE AS 'Unidad' FROM REGISTROMEDIDA RM INNER JOIN REGISTROANTROPOMETRICO RA ON RM.CODREGISTRO=RA.CODREGISTRO 
	INNER JOIN MEDIDA M ON RM.CODMEDIDA=M.CODMEDIDA 
	INNER JOIN UNIDAD U ON M.CODUNIDAD=U.CODUNIDAD
	WHERE RA.CODCLIENTE=@codCliente AND RM.CODMEDIDA=@codMedida)
GO
/**
* Funcion que indica si un cliente tiene afinidad o no con un alimento 
*/
CREATE OR ALTER FUNCTION dbo.afinidadAlimento(@codCliente CHAR(5), @codAlimento CHAR(5)) RETURNS CHAR(2)
AS BEGIN
	RETURN(SELECT PA.AFINIDAD FROM PERFILALIMENTO PA WHERE PA.CODNUTRICIONAL=(SELECT PN.CODNUTRICIONAL FROM PERFILNUTRICIONAL PN WHERE PN.CODCLIENTE=@codCliente) AND PA.CODALIMENTO=@codAlimento)
END
GO

/**
* Funcion que retorna todas las revisiones realizadas para un cliente
*/
CREATE OR ALTER FUNCTION dbo.revisionesCliente(@codCliente CHAR(5)) RETURNS TABLE 
AS
	RETURN(SELECT R.* FROM REVISION R WHERE R.CODCLIENTE=@codCliente)
GO

/**
* Funcion que valida un nif
*/
CREATE OR ALTER FUNCTION dbo.compruebaNif(@NIF VARCHAR(9)) RETURNS BIT
AS BEGIN
  DECLARE @AUX VARCHAR(8) --NUMERICO
  DECLARE @LETRA CHAR(1) -- LETRA
  DECLARE @POSICION INT --POSICION OCUPA EN LA CADENA LETRA NIF
  DECLARE @MOD INT --MODULO PARTE NUMERICA ENTRE 23
  SET @NIF = (SELECT UPPER(@NIF))
  IF LEN(@NIF) = 9 -- DNI
  BEGIN
	SET @AUX = (SELECT SUBSTRING(@NIF,1,8))
	SET @LETRA = (SELECT SUBSTRING(@NIF,9,9))
  END
  IF LEN(@NIF) = 8 -- NIE
  BEGIN
	SET @AUX = (SELECT SUBSTRING(@NIF,1,7))
	SET @LETRA = (SELECT SUBSTRING(@NIF,8,8))
  END
  IF ISNUMERIC(@AUX) = 1
  BEGIN
	SET @POSICION = (SELECT CHARINDEX(@LETRA,'TRWAGMYFPDXBNJZSQVHLCKE'))
	SET @MOD = @AUX % 23
	IF @POSICION <> @MOD -- SI SON DISTINTAS ENTONCES NIF INCORRECTO
	BEGIN
		RETURN 0
	END
  END
  ELSE
  BEGIN
	RETURN 0
  END
  RETURN 1
END
GO	

----------------------Disparadores--------------------------
/**
* Disparador que en vez de borrar un cliente establece su fecha de baja
*/
CREATE OR ALTER TRIGGER evitaBorradoCliente ON CLIENTE INSTEAD OF DELETE
AS
    IF @@ROWCOUNT = 0
	BEGIN
		RETURN
	END
	UPDATE CLIENTE SET FECHABAJA = GETDATE() WHERE CODCLIENTE IN (SELECT D.CODCLIENTE FROM DELETED D)
RETURN;
GO

/**
* Disparador que evita insertar un nuevo cliente si se ha excedido el limite de atletas activos (30)
*/
CREATE OR ALTER TRIGGER evitaExcesoClientes ON CLIENTE AFTER INSERT 
AS
    IF @@ROWCOUNT = 0
	BEGIN
		RETURN
	END
	IF (SELECT COUNT(*) FROM CLIENTE C WHERE C.FECHABAJA IS NULL) > 30
	BEGIN
		RAISERROR('Se ha excedido el numero clientes en activo',16,1)
		ROLLBACK TRANSACTION
	END
RETURN;
GO

/**
* Disparador que evita que se elimine al entrenador
*/
CREATE OR ALTER TRIGGER evitaBorradoEntrenador ON ENTRENADOR AFTER DELETE 
AS
	IF (SELECT COUNT(*) FROM DELETED) > 0
		RAISERROR('No se puede eliminar el entrenador',16,1)
		ROLLBACK TRANSACTION
RETURN;
GO

/**
* Disparador que evita que entrenamientos con tecnicas avanzadas si
* el atleta es principiantes.
*/
CREATE OR ALTER TRIGGER evitaAvanzadaPrincipiante ON PLANEJERCICIO AFTER INSERT 
AS
	DECLARE @codCliente CHAR(5)
	SET  @codCliente = (SELECT TOP 1 PE.CODCLIENTE FROM INSERTED I INNER JOIN PLANENTRENAMIENTO PE ON I.CODENTRENAMIENTO=PE.CODENTRENAMIENTO)
	IF ((SELECT TECNICAAVANZADA FROM INSERTED) IS NOT NULL) AND ((SELECT PD.EXPERIENCIA FROM PERFILDEPORTIVO PD WHERE PD.CODCLIENTE=@codCliente) = 'PRINCIPIANTE')
		RAISERROR('No se puede asignar tecnicas avanzadas a principiantes',16,1)
		ROLLBACK TRANSACTION
RETURN;
GO	

----------------------Indices--------------------------
CREATE NONCLUSTERED INDEX codClienteIndex ON CLIENTE (CODCLIENTE)
GO

----------------------Vistas--------------------------
CREATE VIEW clientesView
AS
SELECT CODCLIENTE, NOMBRE, APELLIDO1, APELLIDO2 FROM CLIENTE
GO

CREATE VIEW ejerciciosView
AS
SELECT CODEJERCICIO, NOMBRE, DESCRIPCION FROM EJERCICIO
GO

CREATE VIEW alimentosView
AS
SELECT * FROM ALIMENTO
GO

----------------------Borrado de datos--------------------------
--- Se muestra con el procedimiento Teardown para una posible implementacion futura de pruebas unitarias

--- Procedimiento de finalizacion y vaciado de la B.D.
-- exec ut_GlobalTest_Teardown 
CREATE OR ALTER PROCEDURE ut_GlobalTest_Teardown
AS BEGIN   
-- Eliminando los datos de prueba
	DELETE FROM PAIS
	DELETE FROM METODOPAGO
	DELETE FROM TARJETA
	DELETE FROM BIZUM
	DELETE FROM PAYPAL
	DELETE FROM TRANSFERENCIA
	DELETE FROM IMAGEN
	DELETE FROM CLIENTE
	DELETE FROM MUSCULO
	DELETE FROM EJERCICIO
	DELETE FROM TIPOALIMENTO
	DELETE FROM ALIMENTO
	DELETE FROM REGISTROANTROPOMETRICO
	DELETE FROM PLANNUTRICIONAL
	DELETE FROM UNIDAD
	DELETE FROM PLANALIMENTO
	DELETE FROM DIA
	DELETE FROM REVISION
	DELETE FROM SERVICIO
	DELETE FROM FACTURA
	DELETE FROM SERVICIOFACTURA
	DELETE FROM PROFESION
	DELETE FROM PERFILDEPORTIVO
	DELETE FROM PERFILNUTRICIONAL
	DELETE FROM PERFILALIMENTO
	DELETE FROM OBJETIVO
	DELETE FROM MEDIDA
	DELETE FROM REGISTROMEDIDA
END
GO

----------------------Insercion de datos--------------------------
--- Con el objetivo de probar el funcionamiento de procedimientos y funciones
--- Se muestra con el procedimiento Setup para una posible implementacion futura de pruebas unitarias

-- Procedimientos de insertado y borrado de datos para las pruebas
-- exec ut_GlobalTest_Setup

CREATE OR ALTER PROCEDURE ut_GlobalTest_Setup
AS BEGIN

RAISERROR('Now at the inserts to pais ....',0,1)
INSERT PAIS VALUES ('ES','España')
INSERT PAIS VALUES ('CA','Canadá')
INSERT PAIS VALUES ('FR','Francia')
INSERT PAIS VALUES ('US','Estados Unidos de America')
INSERT PAIS VALUES ('AS','Andorra')
INSERT PAIS VALUES ('GB','Reino Unido')

RAISERROR('Now at the inserts to metodopago ....',0,1)
INSERT METODOPAGO VALUES('T0000')
INSERT METODOPAGO VALUES('T0001')
INSERT METODOPAGO VALUES('T0002')
INSERT METODOPAGO VALUES('B0000')
INSERT METODOPAGO VALUES('P0000')
INSERT METODOPAGO VALUES('P0001')
INSERT METODOPAGO VALUES('TF000')
INSERT METODOPAGO VALUES('TF001')
INSERT METODOPAGO VALUES('TF002')
INSERT TARJETA VALUES ('Ana Garcia Moreno','5540500001000004','01/12/22','CREDITO','T0000')
INSERT TARJETA VALUES ('Miguel Diaz Ramos','5020470001370055','01/12/23','CREDITO','T0001')
INSERT TARJETA VALUES ('Emma Fernández Torres','4599830100494019','01/12/21','DEBITO','T0002')
INSERT BIZUM VALUES ('777888999','B0000')
INSERT PAYPAL VALUES ('aa3@gmail.com','P0000')
INSERT PAYPAL VALUES ('aas@gmail.com','P0001')
INSERT TRANSFERENCIA VALUES ('ES66','1210','0418','40','1234567891','TF000')
INSERT TRANSFERENCIA VALUES ('ES60','0049','1500','05','1234567892','TF001')
INSERT TRANSFERENCIA VALUES ('ES94','2080','5801','10','1234567891','TF002')

RAISERROR('Now at the inserts to imagen ....',0,1)
INSERT IMAGEN VALUES ('I0000','cara.jpg','JPG',0X00)
INSERT IMAGEN VALUES ('I0001','rostro.jpg','JPG',0X00)
INSERT IMAGEN VALUES ('I0002','miCara.jpg','JPG',0X00)
INSERT IMAGEN VALUES ('I0003','face.jpg','JPG',0X00)
INSERT IMAGEN VALUES ('I0004','imagen.jpg','JPG',0X00)
INSERT IMAGEN VALUES ('I0005','cara.jpg','JPG',0X00)
INSERT IMAGEN VALUES ('I0006','img.jpg','JPG',0X00)
INSERT IMAGEN VALUES ('I0007','yo.jpg','JPG',0X00)
INSERT IMAGEN VALUES ('I0008','face.jpg','JPG',0X00)

INSERT IMAGEN VALUES ('I0009','press.jpg','JPG',0X00)
INSERT IMAGEN VALUES ('I0010','press_cerrado.jpg','JPG',0X00)
INSERT IMAGEN VALUES ('I0011','dominada.jpg','JPG',0X00)
INSERT IMAGEN VALUES ('I0012','curl_martillo.jpg','JPG',0X00)
INSERT IMAGEN VALUES ('I0013','militar.jpg','JPG',0X00)
INSERT IMAGEN VALUES ('I0014','extensiones.jpg','JPG',0X00)
INSERT IMAGEN VALUES ('I0015','peso_muerto.jpg','JPG',0X00)
INSERT IMAGEN VALUES ('I0016','jalon.jpg','JPG',0X00)

INSERT IMAGEN VALUES ('I0017','nutri.jpg','JPG',0X00)
INSERT IMAGEN VALUES ('I0018','nutriPlus.jpg','JPG',0X00)
INSERT IMAGEN VALUES ('I0019','ejercicio.jpg','JPG',0X00)
INSERT IMAGEN VALUES ('I0020','completo.jpg','JPG',0X00)

RAISERROR('Now at the inserts to cliente ....',0,1)
INSERT CLIENTE VALUES ('C0000','12345678A','Ana','Garcia','Moreno','F','01/01/2002','89 Madison St.','89076','Nueva York','666777888','aaa@gmail.com','13/09/2019',null,'I0000','US','T0000')
INSERT CLIENTE VALUES ('C0001','12345678B','Manuel','Gonzalez','Moreno','M','08/08/93','567 Pasadena Ave.','90019','Dallas','777888999','bbb@gmail.com','14/09/2019',null,'I0001','US','B0000')
INSERT CLIENTE VALUES ('C0002','12345678C','Jesus','Rodriguez','Navarro','M','10/09/93','679 Carson St.','98014','Liverpool','666999666','xxx@gmail.com','17/01/2019','13/09/2020','I0002','GB','TF002')
INSERT CLIENTE VALUES ('C0003','12345678D','Emma','Fernández','Torres','F','02/05/92','788 Catamaugus Ave.','89076','Exeter','666333222','ccp@gmail.com','13/02/2019','13/09/2020','I0003','GB','T0002')
INSERT CLIENTE VALUES ('C0004','12345678E','Antonio','Fernández','Garcia','M','11/12/93','Calle Serrano 12','00014','Madrid','666222111','aa3@gmail.com','11/09/2018',null,'I0004','ES','P0000')
INSERT CLIENTE VALUES ('C0005','12345678F','Marta','Martínez','Martínez','F','02/12/90','Calle Mayor 33','77014','Palencia','668999333','aas@gmail.com','13/03/2019',null,'I0005','ES','P0001')
INSERT CLIENTE VALUES ('C0006','12345678G','Nicolas','Sánchez','Gutiérrez','M','06/11/88','Avenguida de Bilbao 27','18014','Andorra la vieja','608777111','jjg@gmail.com','12/04/2020',null,'I0006','AS','TF000')
INSERT CLIENTE VALUES ('C0007','12345678H','Laura','Gómez','Domínguez','F','02/12/00','Barrio Amedias 12','44014','Camargo','665444111','dds@gmail.com','12/09/2020',null,'I0007','ES','TF001')
INSERT CLIENTE VALUES ('C0008','12345678I','Miguel','Diaz','Ramos','M','02/02/98','Avenida de Burgos 12','39014','Santander','666888999','ggh@gmail.com','19/01/2021',null,'I0008','ES','T0001')

RAISERROR('Now at the inserts to musculo ....',0,1)
INSERT MUSCULO VALUES ('M0000','Pectoral')
INSERT MUSCULO VALUES ('M0001','Deltoide')
INSERT MUSCULO VALUES ('M0002','Dorsal')
INSERT MUSCULO VALUES ('M0003','Gemelo')
INSERT MUSCULO VALUES ('M0004','Cuadriceps')
INSERT MUSCULO VALUES ('M0005','Femoral')
INSERT MUSCULO VALUES ('M0006','Biceps')
INSERT MUSCULO VALUES ('M0008','Triceps')

RAISERROR('Now at the inserts to ejercicio ....',0,1)
INSERT EJERCICIO VALUES ('E0000','Press Banca Plano','','I0009')
INSERT EJERCICIO VALUES ('E0001','Press Cerrado','','I0010')
INSERT EJERCICIO VALUES ('E0002','Jalon al pecho','','I0016')
INSERT EJERCICIO VALUES ('E0003','Dominadas','','I0011')
INSERT EJERCICIO VALUES ('E0004','Curl martillo','','I0012')
INSERT EJERCICIO VALUES ('E0005','Extensiones de cuadriceps','','I0014')
INSERT EJERCICIO VALUES ('E0006','Press militar','','I0013')
INSERT EJERCICIO VALUES ('E0007','Peso muerto','','I0015')

RAISERROR('Now at the inserts to tipoalimento ....',0,1)
INSERT INTO TIPOALIMENTO VALUES ('TP000','Frutas')
INSERT INTO TIPOALIMENTO VALUES ('TP001','Hortalizas')
INSERT INTO TIPOALIMENTO VALUES ('TP002','Carnes, pescados y huevos')
INSERT INTO TIPOALIMENTO VALUES ('TP003','Leche y derivados')
INSERT INTO TIPOALIMENTO VALUES ('TP004','Mantecas y aceites')
INSERT INTO TIPOALIMENTO VALUES ('TP005','Legumbres')
INSERT INTO TIPOALIMENTO VALUES ('TP006','Frutos secos')
INSERT INTO TIPOALIMENTO VALUES ('TP007','Cereales y patatas')
INSERT INTO TIPOALIMENTO VALUES ('TP008','Suplementacion')

RAISERROR('Now at the inserts to alimento ....',0,1)
INSERT INTO ALIMENTO VALUES ('A0000','Platano',85,21,1,0.2,'TP000')
INSERT INTO ALIMENTO VALUES ('A0001','Avena',389,66,17,7,'TP007')
INSERT INTO ALIMENTO VALUES ('A0002','Huevo',74,0.3,6.3,5,'TP002')
INSERT INTO ALIMENTO VALUES ('A0003','Arroz blanco',204,44,4,0.44,'TP007')
INSERT INTO ALIMENTO VALUES ('A0004','Espaguetis',220,43,8,1.3,'TP007')
INSERT INTO ALIMENTO VALUES ('A0005','Pechuga de pollo',195,0,30,7.7,'TP002')
INSERT INTO ALIMENTO VALUES ('A0006','Solomillo de ternera',109,0,20,2.5,'TP002')
INSERT INTO ALIMENTO VALUES ('A0007','Yogur',83,12,3,2.2,'TP003')
INSERT INTO ALIMENTO VALUES ('A0008','Avellanas',628,17,15,61,'TP006')
INSERT INTO ALIMENTO VALUES ('A0009','Crema de cacahuete',630,11,26,52,'TP004')
INSERT INTO ALIMENTO VALUES ('A0010','Proteina en polvo',390,4,82,5.3,'TP008')

RAISERROR('Now at the inserts to registroantropometrico ....',0,1)
INSERT INTO REGISTROANTROPOMETRICO VALUES ('R0000','C0000','01/05/2021')
INSERT INTO REGISTROANTROPOMETRICO VALUES ('R0001','C0000','14/05/2021')
INSERT INTO REGISTROANTROPOMETRICO VALUES ('R0002','C0001','14/05/2021')
INSERT INTO REGISTROANTROPOMETRICO VALUES ('R0003','C0002','14/05/2021')
INSERT INTO REGISTROANTROPOMETRICO VALUES ('R0004','C0003','14/05/2021')

RAISERROR('Now at the inserts to plannutricional ....',0,1)
INSERT INTO PLANNUTRICIONAL(CODDIETA,FECHA,CODCLIENTE) VALUES('D0000','14/05/2021','C0000')
INSERT INTO PLANNUTRICIONAL(CODDIETA,FECHA,CODCLIENTE) VALUES('D0001','15/05/2021','C0000')
INSERT INTO PLANNUTRICIONAL(CODDIETA,FECHA,CODCLIENTE) VALUES('D0002','16/05/2021','C0000')
INSERT INTO PLANNUTRICIONAL(CODDIETA,FECHA,CODCLIENTE) VALUES('D0003','14/05/2021','C0001')

RAISERROR('Now at the inserts to unidad ....',0,1)
INSERT INTO UNIDAD VALUES('U0000','Unidad','Ud')
INSERT INTO UNIDAD VALUES('U0001','Gramo','g')
INSERT INTO UNIDAD VALUES('U0002','Litro','l')
INSERT INTO UNIDAD VALUES('U0003','Kilogramo','Kg')
INSERT INTO UNIDAD VALUES('U0004','Porcentaje','%')
INSERT INTO UNIDAD VALUES('U0005','Centimetro','cm')

RAISERROR('Now at the inserts to planalimento ....',0,1)
INSERT INTO PLANALIMENTO VALUES('D0000','A0004',3,200,'U0001')
INSERT INTO PLANALIMENTO VALUES('D0000','A0007',1,100,'U0001')
INSERT INTO PLANALIMENTO VALUES('D0000','A0000',2,1,'U0000')
INSERT INTO PLANALIMENTO VALUES('D0000','A0006',3,200,'U0001')

RAISERROR('Now at the inserts to dia ....',0,1)
INSERT INTO DIA VALUES('14/05/2021','VIERNES')
INSERT INTO DIA VALUES('19/05/2021','MIERCOLES')
INSERT INTO DIA VALUES('20/05/2021','JUEVES')
INSERT INTO DIA VALUES('21/05/2021','VIERNES')
INSERT INTO DIA VALUES('24/05/2021','LUNES')
INSERT INTO DIA VALUES('25/05/2021','MARTES')
INSERT INTO DIA VALUES('19/08/2021','JUEVES')
INSERT INTO DIA VALUES('20/09/2021','LUNES')
INSERT INTO DIA VALUES('15/11/2021','LUNES')

RAISERROR('Now at the inserts to revision ....',0,1)
INSERT INTO REVISION VALUES('V0000','10:00','AZUL','NUTRICION','14/05/2021','C0000')
INSERT INTO REVISION VALUES('V0001','12:00','VERDE','TODO','14/05/2021','C0001')
INSERT INTO REVISION VALUES('V0002','16:00','ROJO','EJERCICIO','14/05/2021','C0002')
INSERT INTO REVISION VALUES('V0003','10:00','AZUL','NUTRICION','19/05/2021','C0003')
INSERT INTO REVISION VALUES('V0004','10:00','AZUL','NUTRICION','20/05/2021','C0004')
INSERT INTO REVISION VALUES('V0005','10:00','AZUL','NUTRICION','19/08/2021','C0003')
INSERT INTO REVISION VALUES('V0006','10:00','AZUL','NUTRICION','20/09/2021','C0004')
INSERT INTO REVISION VALUES('V0007','11:00','AZUL','NUTRICION','19/08/2021','C0003')
INSERT INTO REVISION VALUES('V0008','10:00','AZUL','NUTRICION','15/11/2021','C0004')

RAISERROR('Now at the inserts to servicio ....',0,1)
INSERT INTO SERVICIO VALUES('S0000','Nutricion standard','',49.99,'SUSCRIPCION',NULL,'I0017')
INSERT INTO SERVICIO VALUES('S0001','Nutricion profesional','',89.99,'SUSCRIPCION',NULL,'I0018')
INSERT INTO SERVICIO VALUES('S0002','Ejercicio standard','',49.99,'SUSCRIPCION',NULL,'I0019')
INSERT INTO SERVICIO VALUES('S0003','Completo','',95.99,'SUSCRIPCION',NULL,'I0020')

RAISERROR('Now at the inserts to factura....',0,1)
INSERT INTO FACTURA(NUMERO,AÑO,FECHA,CODCLIENTE,CODMETODOPAGO) VALUES('00000','2021','14/01/2021 12:00','C0000','T0000') 
INSERT INTO FACTURA(NUMERO,AÑO,FECHA,CODCLIENTE,CODMETODOPAGO) VALUES('00001','2021','14/02/2021 12:00','C0000','T0000') 
INSERT INTO FACTURA(NUMERO,AÑO,FECHA,CODCLIENTE,CODMETODOPAGO) VALUES('00002','2021','14/03/2021 12:00','C0000','T0000') 
INSERT INTO FACTURA(NUMERO,AÑO,FECHA,CODCLIENTE,CODMETODOPAGO) VALUES('00003','2021','14/04/2021 12:00','C0000','T0000') 
INSERT INTO FACTURA(NUMERO,AÑO,FECHA,CODCLIENTE,CODMETODOPAGO) VALUES('00004','2021','15/04/2021 12:00','C0001','B0000') 
INSERT INTO FACTURA(NUMERO,AÑO,FECHA,CODCLIENTE,CODMETODOPAGO) VALUES('00005','2021','14/05/2021 12:00','C0000','T0000') 

RAISERROR('Now at the inserts to serviciofactura ....',0,1)
INSERT INTO SERVICIOFACTURA VALUES('S0000','00000','2021',49.99,21,1)
INSERT INTO SERVICIOFACTURA VALUES('S0000','00001','2021',49.99,21,1)
INSERT INTO SERVICIOFACTURA VALUES('S0000','00002','2021',49.99,21,1)
INSERT INTO SERVICIOFACTURA VALUES('S0000','00003','2021',49.99,21,1)
INSERT INTO SERVICIOFACTURA VALUES('S0001','00004','2021',89.99,21,1)
INSERT INTO SERVICIOFACTURA VALUES('S0000','00005','2021',49.99,21,1)

RAISERROR('Now at the inserts to profesion....',0,1)
INSERT INTO PROFESION VALUES('PR000','Agricultor')
INSERT INTO PROFESION VALUES('PR001','Profesor')
INSERT INTO PROFESION VALUES('PR002','Medico')
INSERT INTO PROFESION VALUES('PR003','Camarero')
INSERT INTO PROFESION VALUES('PR004','Abogado')
INSERT INTO PROFESION VALUES('PR005','Ingeniero')
INSERT INTO PROFESION VALUES('PR006','Jardinero')

RAISERROR('Now at the inserts to perfildeportivo....',0,1)
INSERT INTO PERFILDEPORTIVO VALUES('T0000','PRINCIPIANTE','05:00','12:00','','PR000','C0000')
INSERT INTO PERFILDEPORTIVO VALUES('T0001','AVANZADO','08:00','17:00','','PR005','C0001')

RAISERROR('Now at the inserts to perfilnutricional....',0,1)
INSERT INTO PERFILNUTRICIONAL VALUES('N0000',3,'C0000')
INSERT INTO PERFILNUTRICIONAL VALUES('N0001',5,'C0001')

RAISERROR('Now at the inserts to perfilalimento....',0,1)
INSERT INTO PERFILALIMENTO VALUES('A0000','SI','N0000')
INSERT INTO PERFILALIMENTO VALUES('A0001','NO','N0000')
INSERT INTO PERFILALIMENTO VALUES('A0010','NO','N0000')
INSERT INTO PERFILALIMENTO VALUES('A0002','NO','N0001')
INSERT INTO PERFILALIMENTO VALUES('A0003','SI','N0001')
INSERT INTO PERFILALIMENTO VALUES('A0004','SI','N0001')

RAISERROR('Now at the inserts to objetivo....',0,1)
INSERT INTO OBJETIVO VALUES('O0000','Sobrepeso','','01/01/2020','01/07/2020','01/07/2020','T0000')
INSERT INTO OBJETIVO VALUES('O0001','Aumento musculo','','01/01/2021','01/04/2021','08/04/2021','T0000')
INSERT INTO OBJETIVO VALUES('O0002','Normopeso','','01/01/2021','01/07/2021',null,'T0000')
INSERT INTO OBJETIVO VALUES('O0003','Calidad muscular','','01/05/2021','01/07/2021',null,'T0001')
INSERT INTO OBJETIVO VALUES('O0004','Competicion','','01/07/2021','01/08/2021',null,'T0001')

RAISERROR('Now at the inserts to medida....',0,1)
INSERT INTO MEDIDA VALUES('X0000','Peso corporal','U0003')
INSERT INTO MEDIDA VALUES('X0001','Masa grasa','U0004')
INSERT INTO MEDIDA VALUES('X0002','Cuello','U0005')
INSERT INTO MEDIDA VALUES('X0003','Cintura','U0005')
INSERT INTO MEDIDA VALUES('X0004','Muslo','U0005')
INSERT INTO MEDIDA VALUES('X0005','Biceps','U0005')

RAISERROR('Now at the inserts to registromedida....',0,1)
INSERT INTO REGISTROMEDIDA VALUES('R0000','X0000',88)
INSERT INTO REGISTROMEDIDA VALUES('R0000','X0001',25)
INSERT INTO REGISTROMEDIDA VALUES('R0000','X0002',25)
INSERT INTO REGISTROMEDIDA VALUES('R0000','X0003',70)
INSERT INTO REGISTROMEDIDA VALUES('R0001','X0000',84)
INSERT INTO REGISTROMEDIDA VALUES('R0001','X0001',24)
INSERT INTO REGISTROMEDIDA VALUES('R0001','X0002',25)
INSERT INTO REGISTROMEDIDA VALUES('R0001','X0003',68)

END
GO

--
--
-- Ejecucion de las funciones
SELECT * FROM dbo.bajasMensuales();
GO

SELECT * FROM dbo.evolucionMedidaCliente('C0000','X0000'); -- Obtenemos la evolucion del peso de un cliente
GO

SELECT * FROM dbo.infoAlimento('A0000'); -- Obtenemos la informacion nutricional del platano
GO

SELECT * FROM dbo.mailClientes();
GO

SELECT * FROM dbo.medidasCliente('C0000'); -- Obtenemos las medidas actuales de un cliente
GO

SELECT * FROM dbo.objetivosActivosCliente('C0000');
GO

SELECT * FROM dbo.revisionesCliente('C0000');
GO

SELECT * FROM dbo.revisionMasProximas();
GO

SELECT * FROM dbo.ingresosMensuales();
GO

SELECT dbo.afinidadAlimento('C0000','A0000'); -- Obtenemos si el cliente indicado tiene afinidad por el platano
GO

SELECT dbo.devuelveImporteServicio('S0000'); -- Obtenemos el importe sin IVA del servicio de nutricion
GO

SELECT dbo.mediaEnergiaCliente('C0000'); -- Obtenemos la media de energia semanal de un cliente
GO

SELECT dbo.numClientesExperiencia('AVANZADO');
GO

SELECT dbo.topServicioExperiencia('PRINCIPIANTE'); --Devuelve el codigo del servicio mas empleado por los clientes principiantes
GO

SELECT dbo.variacionIngresosMes();
GO

SELECT * FROM dbo.variacionMeses();
GO

SELECT dbo.compruebaNif('72104436B');
GO

--
--
-- Ejecucion de los procedimientos
EXEC dbo.altaCliente 'C0009','20208118A','Antonio','Recio','Matamoros','01/01/1956','Avenida de Montepinar 44','31000','Madrid','888000111','mariscos@gmail.com','España','I0021','miCara.jpg','JPG',0X00
GO

EXEC dbo.añadeAlimentoDieta 'D0002','C0000','16/05/2021','A0008',20,'U0001',2
GO

EXEC dbo.bajaCliente 'C0009'
GO

EXEC dbo.ejercicioMusculo 'E0000','M0000'
GO

EXEC dbo.insertarEjercicio 'E0008','Pull Over Polea Alta','','I0022','pullAlto.png','PNG',0x00
GO

EXEC dbo.nuevaImagenRegistro 'C0000','14/05/2021','Espalda','I0023','miEspalda.jpg','JPG',0X00
GO

EXEC dbo.nuevoObjetivoCliente 'C0000','O0005','Quitar grasa abdomen','','15/06/2021','15/07/2021'
GO

EXEC dbo.nuevoPerfilDeportivoCliente 'D0002','INTERMEDIO','08:00','14:00','','Abogado','C0002'
GO